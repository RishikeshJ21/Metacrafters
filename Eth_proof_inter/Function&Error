// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ErrorHandlingExample {
    address public owner;
    uint256 public value;

    constructor() {
        owner = msg.sender;
        value = 100;
    }

    function setValue(uint256 _newValue) public {
        // Use require() to validate conditions
        require(msg.sender == owner, "Only the owner can set the value");
        require(_newValue > value, "New value must be greater than the current value");

        value = _newValue;
    }

    function performAssert(uint256 _x, uint256 _y) public pure returns (uint256) {
        // Use assert() to check for internal errors that should never occur
        uint256 result = _x + _y;
        assert(result >= _x);

        return result;
    }

    function triggerRevert(bool _shouldRevert) public pure returns (string memory) {
        // Use revert() to intentionally revert a transaction with a custom message
        if (_shouldRevert==false) {
            revert("This transaction was intentionally reverted");
        }

        return "Transaction successful";
    }
}
